{"version":3,"sources":["images/navbarlogo.png","logo.svg","Components/KPICard/index.jsx","Components/NavBarComponent/index.jsx","Components/HeaderComponent/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","KPICardComponent","props","className","Card","Header","kpi","Body","class","Img","variant","src","toLowerCase","Text","data_number","Footer","moment","lastUpdated","format","NavBarComponent","logo","HeaderComponent","state","loading","dataSource","confirmedCases","activeCases","recoveredCases","deaths","fetch","then","response","json","responseJson","setState","lastOriginUpdate","data","summary","total","discharged","catch","error","console","log","CardDeck","KPICard","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"+FAAAA,EAAOC,QAAU,IAA0B,wC,gFCA3CD,EAAOC,QAAU,IAA0B,kC,4NC6B5BC,MAvBf,SAA0BC,GACtB,OAEI,yBAAKC,UAAU,iBAAf,IAAgC,kBAACC,EAAA,EAAD,KAC5B,kBAACA,EAAA,EAAKC,OAAN,KAAcH,EAAMI,KAEpB,kBAACF,EAAA,EAAKG,KAAN,CAAWC,MAAM,eACb,kBAACJ,EAAA,EAAKK,IAAN,CAAUD,MAAM,YAAYE,QAAQ,MAAMC,IAAG,UATxC,eASwC,OAAoBT,EAAMQ,QAAQE,cAAlC,UAC7C,kBAACR,EAAA,EAAKS,KAAN,CAAWL,MAAM,YACZN,EAAMY,cAGf,kBAACV,EAAA,EAAKW,OAAN,KACI,2BAAOZ,UAAU,cAAjB,mBAA+Ca,IAAOd,EAAMe,aAAaC,OAAO,sB,kBCSjFC,MAxBf,SAAyBjB,GACrB,OAeI,yBAAKC,UAAU,kBACX,yBAAKA,UAAU,uBAAsB,yBAAKQ,IAAKS,MAA/C,8B,SCmCGC,E,kDAjDX,WAAYnB,GAAQ,IAAD,8BACf,cAAMA,IACDoB,MAAQ,CACTC,SAAS,EACTC,WAAW,GACXP,YAAa,GACbQ,eAAe,GACfC,YAAY,GACZC,eAAe,GACfC,OAAO,IATI,E,gEAcC,IAAD,OACfC,MAAM,kDACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACG,GACL,EAAKC,SAAS,CACbX,SAAS,EACTC,WAAYS,EACZhB,YAAagB,EAAaE,iBAC1BV,eAAeQ,EAAaG,KAAKC,QAAQC,MACzCZ,YAAYO,EAAaG,KAAKC,QAAQC,MAAQL,EAAaG,KAAKC,QAAQE,WACxEZ,eAAeM,EAAaG,KAAKC,QAAQE,WACzCX,OAAOK,EAAaG,KAAKC,QAAQT,YAGnCY,OAAM,SAAAC,GAAK,OAAEC,QAAQC,IAAIF,Q,+BAI1B,OAEI,yBAAKtC,UAAU,oBAEX,kBAAC,EAAD,MACA,kBAACyC,EAAA,EAAD,KACI,kBAACC,EAAD,CAAkBnC,QAAQ,UAAUJ,IAAI,wBAAwBQ,YAAagC,KAAKxB,MAAMG,eAAgBR,YAAa6B,KAAKxB,MAAML,cAChI,kBAAC4B,EAAD,CAAkBnC,QAAQ,UAAUJ,IAAI,wBAAwBQ,YAAagC,KAAKxB,MAAMK,eAAgBV,YAAa6B,KAAKxB,MAAML,cAChI,kBAAC4B,EAAD,CAAkBnC,QAAQ,UAAUJ,IAAI,qBAAqBQ,YAAagC,KAAKxB,MAAMI,YAAaT,YAAa6B,KAAKxB,MAAML,cAC1H,kBAAC4B,EAAD,CAAkBnC,QAAQ,SAASJ,IAAI,eAAeQ,YAAagC,KAAKxB,MAAMM,OAAQX,YAAa6B,KAAKxB,MAAML,oB,GA1CpG8B,aCSfC,MARf,WACE,OACE,yBAAK7C,UAAU,6BACb,kBAAC,EAAD,QCEc8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdvB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMuB,c","file":"static/js/main.20dabb81.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/navbarlogo.811b0eaf.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport moment from 'moment'\nimport { render } from '@testing-library/react';\nconst imageBaseURL = 'static/img/';\n\nfunction KPICardComponent(props) {\n    return (\n\n        <div className=\"kpi-container\"> <Card>\n            <Card.Header>{props.kpi}</Card.Header>\n\n            <Card.Body class=\"kpi-details\">\n                <Card.Img class='kpi-image' variant=\"top\" src={`${imageBaseURL}${props.variant.toLowerCase()}.png`} />\n                <Card.Text class=\"kpi-text\" >\n                    {props.data_number}\n                </Card.Text>\n            </Card.Body>\n            <Card.Footer>\n                <small className=\"text-muted\">Last updated at {moment(props.lastUpdated).format(\"MM-DD-YYYY LT\")}</small>\n            </Card.Footer>\n        </Card>\n        </div>\n\n\n\n    )\n}\n\nexport default KPICardComponent;\n//total confirmed , active ,recoverd , deaths","import React, { useState } from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport logo from \"../../images/navbarlogo.png\";\n\nfunction NavBarComponent(props) {\n    return (\n        // <>  \n        // <Navbar bg=\"light\" variant=\"light\">\n        //     <Navbar.Brand href=\"#home\">\n        //     <img\n        //         alt=\"\"\n        //         src=\"/navbarlogo.png\"\n        //         width=\"70\"\n        //         height=\"70\"\n        //         className=\"d-inline-block align-top\"\n        //     />{' '}\n        //     </Navbar.Brand>\n        //     COVID-19 Dashboard INDIA\n        // </Navbar>\n        // </>\n        <div className=\"logo-container\">\n            <div className=\"main-logo-container\"><img src={logo} />\n                    COVID-19 Dashboard INDIA\n                </div>\n        </div>\n    )\n}\n\nexport default NavBarComponent;\n","import React, { Component } from 'react';\nimport KPICardComponent from \"../KPICard\";\nimport NavBarComponent from \"../NavBarComponent\";\nimport CardDeck from 'react-bootstrap/CardDeck'\nimport ButtonComponent from '../ButtonComponent'\n\nclass HeaderComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            dataSource:[],\n            lastUpdated: '',\n            confirmedCases:'',\n            activeCases:'',\n            recoveredCases:'',\n            deaths:''\n\n        }\n    }\n\n    componentDidMount(){\n        fetch(\"https://api.rootnet.in/covid19-in/stats/latest\")\n        .then(response => response.json())\n        .then((responseJson)=> {\n          this.setState({\n           loading: false,\n           dataSource: responseJson,\n           lastUpdated: responseJson.lastOriginUpdate,\n           confirmedCases:responseJson.data.summary.total,\n           activeCases:responseJson.data.summary.total - responseJson.data.summary.discharged,\n           recoveredCases:responseJson.data.summary.discharged,\n           deaths:responseJson.data.summary.deaths\n          })\n        })\n        .catch(error=>console.log(error)) //to catch the errors if any\n        }\n\n    render() {\n        return (\n\n            <div className=\"header-container\">\n\n                <NavBarComponent/>\n                <CardDeck>\n                    <KPICardComponent variant=\"Primary\" kpi=\"Total Confirmed Cases\" data_number={this.state.confirmedCases} lastUpdated={this.state.lastUpdated} />\n                    <KPICardComponent variant=\"Success\" kpi=\"Total Recovered Cases\" data_number={this.state.recoveredCases} lastUpdated={this.state.lastUpdated} />\n                    <KPICardComponent variant=\"Warning\" kpi=\"Total Active Cases\" data_number={this.state.activeCases} lastUpdated={this.state.lastUpdated} />\n                    <KPICardComponent variant=\"Danger\" kpi=\"Total Deaths\" data_number={this.state.deaths} lastUpdated={this.state.lastUpdated}/>\n                </CardDeck>\n                {/* <ButtonComponent title=\"Click me!\" onClick={()=> {}}/> */}\n            </div>\n        )\n\n    }\n}\nexport default HeaderComponent;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport './SCSS/main.scss';\nimport HeaderComponent from \"../src/Components/HeaderComponent\";\n\n\nfunction App() {\n  return (\n    <div className=\"covid-dashboard-container\">\n      <HeaderComponent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}